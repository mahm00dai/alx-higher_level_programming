#!/usr/bin/python3
"""
Test cases for the MyList class.
"""

MyList = __import__('1-my_list').MyList
import io
import sys

def test_my_list():
    """
    Function to test the functionality of MyList class.
    """

    # Test 1: Creating an empty MyList and checking its contents
    my_list = MyList()
    assert my_list == [], "Test 1 Failed: Expected an empty list"

    # Test 2: Appending integers and checking contents
    my_list.append(5)
    my_list.append(3)
    my_list.append(9)
    assert my_list == [5, 3, 9], "Test 2 Failed: Expected [5, 3, 9]"

    # Test 3: Print sorted on a list with multiple elements
    captured_output = io.StringIO()       # Create a StringIO object to capture print output
    sys.stdout = captured_output            # Redirect stdout to the StringIO object
    my_list.print_sorted()                  # Call the print_sorted method
    sys.stdout = sys.__stdout__            # Reset redirect.
    assert captured_output.getvalue() == "[3, 5, 9]\n", "Test 3 Failed: Expected printed sorted list"

    # Test 4: Check if original list remains unchanged after print_sorted
    assert my_list == [5, 3, 9], "Test 4 Failed: Expected original list to remain [5, 3, 9]"

    # Test 5: Test with already sorted list
    my_list = MyList([1, 2, 3, 4, 5])
    captured_output = io.StringIO()
    sys.stdout = captured_output
    my_list.print_sorted()
    sys.stdout = sys.__stdout__
    assert captured_output.getvalue() == "[1, 2, 3, 4, 5]\n", "Test 5 Failed: Expected printed sorted list"

    # Test 6: Test with duplicate elements
    my_list = MyList([3, 1, 2, 3, 2])
    captured_output = io.StringIO()
    sys.stdout = captured_output
    my_list.print_sorted()
    sys.stdout = sys.__stdout__
    assert captured_output.getvalue() == "[1, 2, 2, 3, 3]\n", "Test 6 Failed: Expected printed sorted list with duplicates"

    # Test 7: Test with a single element
    my_list = MyList([42])
    captured_output = io.StringIO()
    sys.stdout = captured_output
    my_list.print_sorted()
    sys.stdout = sys.__stdout__
    assert captured_output.getvalue() == "[42]\n", "Test 7 Failed: Expected printed sorted list with one element"

    print("All tests passed!")

# Execute the test function
test_my_list()
